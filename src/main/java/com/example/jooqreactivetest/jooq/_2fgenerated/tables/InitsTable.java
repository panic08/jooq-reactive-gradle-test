/*
 * This file is generated by jOOQ.
 */
package _2fgenerated.tables;


import _2fgenerated.Keys;
import _2fgenerated.Public;
import _2fgenerated.tables.records.InitsTableRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class InitsTable extends TableImpl<InitsTableRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.inits_table</code>
     */
    public static final InitsTable INITS_TABLE = new InitsTable();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<InitsTableRecord> getRecordType() {
        return InitsTableRecord.class;
    }

    /**
     * The column <code>public.inits_table.id</code>.
     */
    public final TableField<InitsTableRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.inits_table.name</code>.
     */
    public final TableField<InitsTableRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    private InitsTable(Name alias, Table<InitsTableRecord> aliased) {
        this(alias, aliased, null);
    }

    private InitsTable(Name alias, Table<InitsTableRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.inits_table</code> table reference
     */
    public InitsTable(String alias) {
        this(DSL.name(alias), INITS_TABLE);
    }

    /**
     * Create an aliased <code>public.inits_table</code> table reference
     */
    public InitsTable(Name alias) {
        this(alias, INITS_TABLE);
    }

    /**
     * Create a <code>public.inits_table</code> table reference
     */
    public InitsTable() {
        this(DSL.name("inits_table"), null);
    }

    public <O extends Record> InitsTable(Table<O> child, ForeignKey<O, InitsTableRecord> key) {
        super(child, key, INITS_TABLE);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<InitsTableRecord, Integer> getIdentity() {
        return (Identity<InitsTableRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<InitsTableRecord> getPrimaryKey() {
        return Keys.INITS_TABLE_PKEY;
    }

    @Override
    public InitsTable as(String alias) {
        return new InitsTable(DSL.name(alias), this);
    }

    @Override
    public InitsTable as(Name alias) {
        return new InitsTable(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public InitsTable rename(String name) {
        return new InitsTable(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public InitsTable rename(Name name) {
        return new InitsTable(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<Integer, String> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
